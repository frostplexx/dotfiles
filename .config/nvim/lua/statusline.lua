-- local modes = {
--     ["n"] = "N",
--     ["no"] = "N",
--     ["v"] = "V",
--     ["V"] = "VL",
--     [""] = "VB",
--     ["s"] = "S",
--     ["S"] = "SL",
--     [""] = "SB",
--     ["i"] = "I",
--     ["ic"] = "I",
--     ["R"] = "R",
--     ["Rv"] = "VR",
--     ["c"] = "C",
--     ["cv"] = "VIM EX",
--     ["ce"] = "EX",
--     ["r"] = "PROMPT",
--     ["rm"] = "MORE",
--     ["r?"] = "CONFIRM",
--     ["!"] = "S",
--     ["t"] = "T",
-- }
--
-- local function update_mode_colors()
--     local current_mode = vim.api.nvim_get_mode().mode
--     if current_mode == "n" then
--         return "%#StatuslineAccent#"
--     elseif current_mode == "i" or current_mode == "ic" then
--         return "%#StatuslineInsertAccent#"
--     elseif current_mode == "v" or current_mode == "V" or current_mode == "" then
--         return "%#StatuslineVisualAccent#"
--     elseif current_mode == "R" then
--         return "%#StatuslineReplaceAccent#"
--     elseif current_mode == "c" then
--         return "%#StatuslineCmdLineAccent#"
--     elseif current_mode == "t" then
--         return "%#StatuslineTerminalAccent#"
--     else
--         return "%#Statusline#"
--     end
-- end
--
-- local function mode()
--     local current_mode = vim.api.nvim_get_mode().mode
--     local mode_color = update_mode_colors()
--     return string.format("%s %s %%#Normal#", mode_color, modes[current_mode]):upper()
-- end
--
-- local function filepath()
--     local fpath = vim.fn.fnamemodify(vim.fn.expand "%", ":~:.:h")
--     if fpath == "" or fpath == "." then
--         return " "
--     end
--
--     return string.format(" %%<%s/", fpath)
-- end
--
-- local function filename()
--     local fname = vim.fn.expand "%:t"
--     if fname == "" then
--         return ""
--     end
--     return fname .. " "
-- end
--
-- local function lsp()
--     local count = {}
--     local levels = {
--         errors = "Error",
--         warnings = "Warn",
--         info = "Info",
--         hints = "Hint",
--     }
--
--     for k, level in pairs(levels) do
--         count[k] = vim.tbl_count(vim.diagnostic.get(0, { severity = level }))
--     end
--
--     local errors = ""
--     local warnings = ""
--     local hints = ""
--     local info = ""
--
--     if count["errors"] ~= 0 then
--         errors = " %#LspDiagnosticsSignError# " .. count["errors"]
--     end
--     if count["warnings"] ~= 0 then
--         warnings = " %#LspDiagnosticsSignWarning# " .. count["warnings"]
--     end
--     if count["hints"] ~= 0 then
--         hints = " %#LspDiagnosticsSignHint# " .. count["hints"]
--     end
--     if count["info"] ~= 0 then
--         info = " %#LspDiagnosticsSignInformation# " .. count["info"]
--     end
--
--     return errors .. warnings .. hints .. info .. "%#Normal#"
-- end
--
-- local function filetype()
--     local icon, icon_highlight = require('nvim-web-devicons').get_icon(vim.fn.expand("%:t"), vim.bo.filetype)
--     local icon_str = icon and ("%#" .. icon_highlight .. "#" .. icon .. " ") or ""
--     local mode_color = update_mode_colors()
--     return string.format(" %s %s %s", icon_str, mode_color, vim.bo.filetype)
-- end
--
-- -- %P - Percentage through the file.
-- -- %l - Line Number
-- -- %c - Column Number
-- local function lineinfo()
--     if vim.bo.filetype == "alpha" then
--         return ""
--     end
--     return " %l:%c "
-- end
--
-- local vcs = function()
--     local git_info = vim.b.gitsigns_status_dict
--     if not git_info or git_info.head == "" then
--         return ""
--     end
--     local added = git_info.added and ("%#GitSignsAdd#+" .. git_info.added .. " ") or ""
--     local changed = git_info.changed and ("%#GitSignsChange#~" .. git_info.changed .. " ") or ""
--     local removed = git_info.removed and ("%#GitSignsDelete#-" .. git_info.removed .. " ") or ""
--     if git_info.added == 0 then
--         added = ""
--     end
--     if git_info.changed == 0 then
--         changed = ""
--     end
--     if git_info.removed == 0 then
--         removed = ""
--     end
--     return table.concat {
--         "",
--         added,
--         changed,
--         removed,
--         "",
--         "%#GitSignsAdd# ",
--         git_info.head,
--         " %#Normal#",
--     }
-- end
--
-- Statusline = {}
--
-- Statusline.active = function()
--     return table.concat {
--         "%#Statusline#",
--         mode(),
--         vcs(),
--         lsp(),
--         "%#Normal#",
--         filepath(),
--         filename(),
--         "%=%#StatusLineExtra#",
--         lineinfo(),
--         filetype(),
--     }
-- end
--
-- function Statusline.inactive()
--     return " %F"
-- end
--
-- function Statusline.short()
--     return "%#StatusLineNC#   NvimTree"
-- end
--
-- vim.cmd [[
--   highlight StatuslineAccent guifg=#ffffff guibg=#5f00ff
--   highlight StatuslineInsertAccent guifg=#ffffff guibg=#00afaf
--   highlight StatuslineVisualAccent guifg=#ffffff guibg=#ff5f00
--   highlight StatuslineReplaceAccent guifg=#ffffff guibg=#ff0000
--   highlight StatuslineCmdLineAccent guifg=#ffffff guibg=#af5f00
--   highlight StatuslineTerminalAccent guifg=#ffffff guibg=#5f5fff
-- ]]
--
--
-- vim.api.nvim_exec([[
--   augroup Statusline
--   au!
--   au WinEnter,BufEnter * setlocal statusline=%!v:lua.Statusline.active()
--   au WinLeave,BufLeave * setlocal statusline=%!v:lua.Statusline.inactive()
--   au WinEnter,BufEnter,FileType NvimTree setlocal statusline=%!v:lua.Statusline.short()
--   augroup END
-- ]], false)
