"use strict";var c=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var N=(e,t)=>{for(var i in t)c(e,i,{get:t[i],enumerable:!0})},b=(e,t,i,u)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of h(t))!v.call(e,s)&&s!==i&&c(e,s,{get:()=>t[s],enumerable:!(u=D(t,s))||u.enumerable});return e};var w=e=>b(c({},"__esModule",{value:!0}),e);var I={};N(I,{default:()=>S});module.exports=w(I);var m=require("@raycast/api");var g=require("@raycast/api"),p=require("node:child_process");var r=class extends Error{},o=class extends Error{},f=class extends Error{},a=class extends Error{},l=class extends Error{};var n=(0,g.getPreferenceValues)(),T=n.tailscalePath&&n.tailscalePath.length>0?n.tailscalePath:"/Applications/Tailscale.app/Contents/MacOS/Tailscale",y=n.tailscaleExecMaxBuffersMB&&n.tailscaleExecMaxBuffersMB?n.tailscaleExecMaxBuffersMB*1024*1024:10*1024*1024;function d(e){try{return(0,p.execSync)(`${T} ${e}`,{maxBuffer:y}).toString().trim()}catch(t){if(t instanceof Error){if(t.message.includes("No such file or directory"))throw new r;if(t.message.includes("is Tailscale running?"))throw new o;if(t.message.includes("spawnSync /bin/sh ENOBUFS"))throw new a;if(t.message.includes('The value of "options.maxBuffer" is out of range. It must be a positive number. Received NaN'))throw new l}throw console.log(`throwing error: ${t}`),t}}function x(e,t){return e instanceof r?{title:"Can\u2019t find the Tailscale CLI",description:`Your Tailscale CLI Path is invalid.
Update your extension preferences to fix this.`}:e instanceof o?{title:"Can\u2019t connect to Tailscale",description:"Make sure Tailscale is running and try again."}:e instanceof f?{title:"Not connected to a tailnet",description:`Tailscale is running, but you\u2019re not connected to a tailnet.
Log in and try again.`}:e instanceof a?{title:"Response larger than buffer size",description:"Increase `Max buffers ...` in the extension configuration."}:e instanceof l?{title:"Invalid `Max buffers ...` configuration",description:"Set `Max buffers ...` to a number in the extension configuration."}:(console.log(`Unhandled error: ${e}`),{title:"Something went wrong",description:t})}async function S(){let e;e="Tailscale";try{d("down")}catch(t){e=x(t,"").title}await(0,m.updateCommandMetadata)({subtitle:e})}
