"use strict";var g=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var w=(t,e)=>{for(var i in e)g(t,i,{get:e[i],enumerable:!0})},T=(t,e,i,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of N(e))!b.call(t,n)&&n!==i&&g(t,n,{get:()=>e[n],enumerable:!(o=h(e,n))||o.enumerable});return t};var y=t=>T(g({},"__esModule",{value:!0}),t);var P={};w(P,{default:()=>v});module.exports=y(P);var D=require("@raycast/api");var p=require("@raycast/api"),d=require("node:child_process");var r=class extends Error{},a=class extends Error{},l=class extends Error{},c=class extends Error{},f=class extends Error{};function x(){let t=M("status --json"),e=JSON.parse(t);if(!e||!e.Self.Online)throw new l;return e}function m(t){let e=[],i=t.Self,o={self:!0,key:i.ID,name:i.DNSName.split(".")[0],userid:i.UserID.toString(),dns:i.DNSName,ipv4:i.TailscaleIPs[0],ipv6:i.TailscaleIPs[1],os:i.OS,online:i.Online,lastseen:new Date(i.LastSeen),exitnode:i.ExitNode,exitnodeoption:i.ExitNodeOption,tags:i.Tags};e.push(o);for(let[,n]of Object.entries(t.Peer)){let u={self:!1,key:n.ID,name:n.DNSName.split(".")[0],userid:n.UserID.toString(),dns:n.DNSName,ipv4:n.TailscaleIPs[0],ipv6:n.TailscaleIPs[1],os:n.OS=="linux"?"Linux":n.OS,online:n.Online,lastseen:new Date(n.LastSeen),exitnode:n.ExitNode,exitnodeoption:n.ExitNodeOption,tags:n.Tags};e.push(u)}return e}var s=(0,p.getPreferenceValues)(),I=s.tailscalePath&&s.tailscalePath.length>0?s.tailscalePath:"/Applications/Tailscale.app/Contents/MacOS/Tailscale",E=s.tailscaleExecMaxBuffersMB&&s.tailscaleExecMaxBuffersMB?s.tailscaleExecMaxBuffersMB*1024*1024:10*1024*1024;function M(t){try{return(0,d.execSync)(`${I} ${t}`,{maxBuffer:E}).toString().trim()}catch(e){if(e instanceof Error){if(e.message.includes("No such file or directory"))throw new r;if(e.message.includes("is Tailscale running?"))throw new a;if(e.message.includes("spawnSync /bin/sh ENOBUFS"))throw new c;if(e.message.includes('The value of "options.maxBuffer" is out of range. It must be a positive number. Received NaN'))throw new f}throw console.log(`throwing error: ${e}`),e}}function S(t,e){return t instanceof r?{title:"Can\u2019t find the Tailscale CLI",description:`Your Tailscale CLI Path is invalid.
Update your extension preferences to fix this.`}:t instanceof a?{title:"Can\u2019t connect to Tailscale",description:"Make sure Tailscale is running and try again."}:t instanceof l?{title:"Not connected to a tailnet",description:`Tailscale is running, but you\u2019re not connected to a tailnet.
Log in and try again.`}:t instanceof c?{title:"Response larger than buffer size",description:"Increase `Max buffers ...` in the extension configuration."}:t instanceof f?{title:"Invalid `Max buffers ...` configuration",description:"Set `Max buffers ...` to a number in the extension configuration."}:(console.log(`Unhandled error: ${t}`),{title:"Something went wrong",description:e})}async function v(){let t;try{let e=x(),i=e.MagicDNSSuffix,n=m(e).find(u=>u.exitnode);t=`\u2705 Connected on ${i}`,n&&(t+=` via ${n.name}`)}catch(e){t="\u274C "+S(e,"").title}await(0,D.updateCommandMetadata)({subtitle:t})}
